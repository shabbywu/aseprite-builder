name: Build and release Aseprite

on:
  workflow_dispatch:
    inputs:
      aseprite-tag: 
        required: true
        default: latest

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      run: |
        if [[ "${{ github.event.inputs.message }}" == "latest" ]] ; then
          release_id='latest'
        else
          release_id=$(curl https://api.github.com/graphql -X POST -H "Authorization: bearer ${GITHUB_TOKEN}" -d '{"query":"query { repository ( owner: \"aseprite\", name: \"aseprite\" ) { release ( tagName: \"v1.3.12\" ) { databaseId createdAt }} }"}' | jq -r '.data.repository.release.databaseId')
        fi

        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/${release_id})
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')

        echo "${LATEST_TAG}" > ${LATEST_TAG}.txt
        {
          echo 'latest_tag<<EOF'
          echo ${LATEST_TAG}
          echo EOF
        } >> "$GITHUB_OUTPUT"
        {
          echo 'download_url<<EOF'
          echo ${DOWNLOAD_URL}
          echo EOF
        } >> "$GITHUB_OUTPUT"
        {
          echo 'version_info<<EOF'
          echo ${VERSION_INFO}
          echo EOF
        } >> "$GITHUB_OUTPUT"
    - name: Load version from cache
      id: version_check
      uses: actions/cache@v4
      with:
        path: ${{ steps.version_info.outputs.latest_tag }}.txt
        key: builtflag-${{ steps.version_info.outputs.latest_tag }}
    - name: Should we start new build?
      id: should_build
      if: steps.version_check.outputs.cache-hit != 'true'
      run: echo "should_build=true" >> "$GITHUB_OUTPUT"
    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: true
        prerelease: false

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [ windows-latest, macOS-latest ]
        fail-fast: false
    steps:
      - name: Install Dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
      - uses: actions/checkout@v4
      - name: Download Aseprite release
        run: |
          curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build
      - name: Install Skia
        working-directory: aseprite
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] ; then
            choco install wget -y --no-progress
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
            unzip Skia-Windows-Release-x64.zip -d skia
          elif [[ "${{ runner.os }}" == "macOS" ]] ; then
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-arm64.zip
            unzip Skia-macOS-Release-arm64.zip -d skia
          else
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libstdc++.zip
            unzip Skia-Linux-Release-x64-libstdc++.zip -d skia
          fi
      - uses: aseprite/get-ninja@main
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
      - name: Generating Makefiles
        shell: bash
        working-directory: aseprite
        run: |
          export enable_ccache=off
          export laf_backend=skia
          export enable_scripting=off

          if [[ "${{ runner.os }}" == "macOS" ]] ; then
            export skia_arch=arm64
          else
            export skia_arch=x64
          fi

          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=OFF \
            -DENABLE_SCRIPTING=$enable_scripting \
            -DENABLE_CCACHE=$enable_ccache \
            -DLAF_BACKEND=$laf_backend \
            -DSKIA_DIR=skia \
            -DSKIA_LIBRARY_DIR=skia/out/Release-$skia_arch
      - name: Compiling
        shell: bash
        working-directory: aseprite
        run: |
          cd build && ninja
      - name: Clean up build folder
        working-directory: aseprite/build/bin
        shell: bash
        run: find . -mindepth 1 ! \( -name 'aseprite' -o -name 'aseprite.exe' -o -name 'data' -prune \) -exec rm -rf {} +
      - name: Make portable zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
      - name: Create release
        working-directory: aseprite/build/bin
        run: 7z -tzip a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip *
      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_content_type: application/zip
